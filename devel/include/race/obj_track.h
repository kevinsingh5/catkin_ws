// Generated by gencpp from file race/obj_track.msg
// DO NOT EDIT!


#ifndef RACE_MESSAGE_OBJ_TRACK_H
#define RACE_MESSAGE_OBJ_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace race
{
template <class ContainerAllocator>
struct obj_track_
{
  typedef obj_track_<ContainerAllocator> Type;

  obj_track_()
    : obj_found(false)
    , dist(0.0)
    , offset(0.0)  {
    }
  obj_track_(const ContainerAllocator& _alloc)
    : obj_found(false)
    , dist(0.0)
    , offset(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _obj_found_type;
  _obj_found_type obj_found;

   typedef float _dist_type;
  _dist_type dist;

   typedef float _offset_type;
  _offset_type offset;




  typedef boost::shared_ptr< ::race::obj_track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::race::obj_track_<ContainerAllocator> const> ConstPtr;

}; // struct obj_track_

typedef ::race::obj_track_<std::allocator<void> > obj_track;

typedef boost::shared_ptr< ::race::obj_track > obj_trackPtr;
typedef boost::shared_ptr< ::race::obj_track const> obj_trackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::race::obj_track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::race::obj_track_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace race

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'race': ['/home/nvidia/catkin_ws/src/race/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::race::obj_track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::race::obj_track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::race::obj_track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::race::obj_track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::race::obj_track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::race::obj_track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::race::obj_track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b471f6f1d7cfaf31ae77ada0b181d9de";
  }

  static const char* value(const ::race::obj_track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb471f6f1d7cfaf31ULL;
  static const uint64_t static_value2 = 0xae77ada0b181d9deULL;
};

template<class ContainerAllocator>
struct DataType< ::race::obj_track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "race/obj_track";
  }

  static const char* value(const ::race::obj_track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::race::obj_track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool obj_found\n\
float32 dist\n\
float32 offset\n\
";
  }

  static const char* value(const ::race::obj_track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::race::obj_track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_found);
      stream.next(m.dist);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj_track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::race::obj_track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::race::obj_track_<ContainerAllocator>& v)
  {
    s << indent << "obj_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obj_found);
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    s << indent << "offset: ";
    Printer<float>::stream(s, indent + "  ", v.offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RACE_MESSAGE_OBJ_TRACK_H
